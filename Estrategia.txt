APLICACION

- Rol no tiene formulario de baja porque el enunciado dice que no se va a borrar un rol nunca, como mucho se van a modificar las funcionalidades que tiene. La baja sería deshabilitarlo pero para eso no necesitamos un form de baja. 

- En la baja de las aeronaves sí necesitamos un formulario, donde tenemos que cargarle los motivos de baja, etc. 

- Los controles que utilizamos en los forms fueron subclaseados para permitir que implementen una interfaz y poder hacer validaciones polimórficas entre otros métodos que entienden, así no se repite tanto código. (implementan ISuperControls).

- Creamos métodos de extensiones en Extensions.cs y Validations.cs también (está comentado en las respectivas clases)

- En vez de validar que un usuario no ingrese en los textbox caracteres que no debe, ej: en documento ingresar 10 caracteres y encima ingresó letras, directamente desde la aplicación se restringe la longitud de caracteres que puede ingresar y se lanza el evento onWrite que permite que si no es un dígito no lo escriba. Análogamente para otros textbox que requieren solamente caracteres alfanuméricos, o letras. 

- En el form aeronave, en vez de permitir que el usuario checkee tipo de servicio encomienda o pasaje, tenemos dos numericUpDown que al incrementarse luego en la grid va a aparecer si eligió los dos servicios o uno. 

- Creamos un objeto SqlConnector que hace polimórficas a las conexiones con la base de datos y una capa DAO que conecta la base de datos (usando el sqlConnector) con la aplicación. 

